public class InsureeController : Controller
{
    private ApplicationDbContext db = new ApplicationDbContext();

    // POST: Insuree/Create
    [HttpPost]
    [ValidateAntiForgeryToken]
    public ActionResult Create([Bind(Include = "FirstName,LastName,EmailAddress,DateOfBirth,CarYear,CarMake,CarModel,SpeedingTickets,DUI,FullCoverage")] Insuree insuree)
    {
        if (ModelState.IsValid)
        {
            // Calculate the quote
            insuree.Quote = CalculateQuote(insuree);
            db.Insurees.Add(insuree);
            db.SaveChanges();
            return RedirectToAction("Index");
        }

        return View(insuree);
    }

    // POST: Insuree/Edit/5
    [HttpPost]
    [ValidateAntiForgeryToken]
    public ActionResult Edit([Bind(Include = "Id,FirstName,LastName,EmailAddress,DateOfBirth,CarYear,CarMake,CarModel,SpeedingTickets,DUI,FullCoverage,Quote")] Insuree insuree)
    {
        if (ModelState.IsValid)
        {
            // Recalculate the quote
            insuree.Quote = CalculateQuote(insuree);
            db.Entry(insuree).State = EntityState.Modified;
            db.SaveChanges();
            return RedirectToAction("Index");
        }

        return View(insuree);
    }

    private decimal CalculateQuote(Insuree insuree)
    {
        decimal basePrice = 50m;
        int age = DateTime.Now.Year - insuree.DateOfBirth.Year;

        // Age-based additions
        if (age <= 18)
        {
            basePrice += 100;
        }
        else if (age >= 19 && age <= 25)
        {
            basePrice += 50;
        }
        else if (age >= 26)
        {
            basePrice += 25;
        }

        // Car year-based additions
        if (insuree.CarYear < 2000)
        {
            basePrice += 25;
        }
        else if (insuree.CarYear > 2015)
        {
            basePrice += 25;
        }

        // Car make/model-based additions
        if (insuree.CarMake.ToLower() == "porsche")
        {
            basePrice += 25;
            if (insuree.CarModel.ToLower() == "911 carrera")
            {
                basePrice += 25;
            }
        }

        // Speeding tickets
        basePrice += insuree.SpeedingTickets * 10;

        // DUI penalty
        if (insuree.DUI)
        {
            basePrice *= 1.25m;
        }

        // Full coverage
        if (insuree.FullCoverage)
        {
            basePrice *= 1.5m;
        }

        return basePrice;
    }
}
@model YourProjectNamespace.Models.Insuree

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <!-- Other fields like FirstName, LastName, EmailAddress, etc. -->

        <!-- Do not display the Quote field -->
        @Html.HiddenFor(model => model.Quote)

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}
public ActionResult Admin()
{
    var insurees = db.Insurees.ToList();
    return View(insurees);
}
@model IEnumerable<YourProjectNamespace.Models.Insuree>

<table class="table">
    <thead>
        <tr>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Email Address</th>
            <th>Quote</th>
        </tr>
    </thead>
    <tbody>
    @foreach (var insuree in Model)
    {
        <tr>
            <td>@insuree.FirstName</td>
            <td>@insuree.LastName</td>
            <td>@insuree.EmailAddress</td>
            <td>@insuree.Quote</td>
        </tr>
    }
    </tbody>
</table>
